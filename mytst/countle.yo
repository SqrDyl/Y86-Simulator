0x000:                      |         .pos 0
                            | #initialize %rax to 0
0x000: 30f00000000000000000 | irmovq $0, %rax
0x00a: 30fb0000000000000000 | irmovq $0, %r11
                            | #initialize another register to the address of the first number
0x014: 30f8b800000000000000 | irmovq nums, %r8
                            | #it can also be helpful to initialize another register to 1
0x01e: 30f90100000000000000 | irmovq $1, %r9
0x028: 10                   | nop
0x029: 10                   | nop
                            | #for each number:  
                            | #get the number out of memory
0x02a: 50a80000000000000000 | mrmovq (%r8), %r10
0x034: 10                   | nop
0x035: 10                   | nop
0x036: 10                   | nop
                            | #cause the condition codes to be modified based upon value of the number
                            | #add 1 to %rax if number <= 0; otherwise, add 0 to %rax
0x037: 60ba                 | addq %r11, %r10
0x039: 10                   | nop
0x03a: 10                   | nop
0x03b: 10                   | nop
0x03c: 2190                 | cmovle %r9, %rax
                            | 
                            | 
0x03e: 50a80100000000000000 | mrmovq 1(%r8), %r10
0x048: 10                   | nop
0x049: 10                   | nop
0x04a: 10                   | nop
0x04b: 60ba                 | addq %r11, %r10
0x04d: 10                   | nop
0x04e: 10                   | nop
0x04f: 10                   | nop
0x050: 2190                 | cmovle %r9, %rax
                            | 
0x052: 50a80200000000000000 | mrmovq 2(%r8), %r10
0x05c: 10                   | nop
0x05d: 10                   | nop
0x05e: 10                   | nop
0x05f: 60ba                 | addq %r11, %r10
0x061: 10                   | nop
0x062: 10                   | nop
0x063: 10                   | nop
0x064: 2190                 | cmovle %r9, %rax
                            | 
0x066: 50a80300000000000000 | mrmovq 3(%r8), %r10
0x070: 10                   | nop
0x071: 10                   | nop
0x072: 10                   | nop
0x073: 60ba                 | addq %r11, %r10
0x075: 10                   | nop
0x076: 10                   | nop
0x077: 10                   | nop
0x078: 2190                 | cmovle %r9, %rax
                            | 
0x07a: 50a80400000000000000 | mrmovq 4(%r8), %r10
0x084: 10                   | nop
0x085: 10                   | nop
0x086: 10                   | nop
0x087: 60ba                 | addq %r11, %r10
0x089: 10                   | nop
0x08a: 10                   | nop
0x08b: 10                   | nop
0x08c: 2190                 | cmovle %r9, %rax
                            | 
0x08e: 50a80500000000000000 | mrmovq 5(%r8), %r10
0x098: 10                   | nop
0x099: 10                   | nop
0x09a: 10                   | nop
0x09b: 60ba                 | addq %r11, %r10
0x09d: 10                   | nop
0x09e: 10                   | nop
0x09f: 10                   | nop
0x0a0: 2190                 | cmovle %r9, %rax
                            | 
                            | 
                            | 
                            | #finally store %rax in memory location result
0x0a2: 400fb000000000000000 | rmmovq %rax, result
                            | 
                            | 
0x0ac: 00                   |         halt
0x0b0:                      |         .align 8
0x0b0: 0000000000000000     | result: .quad 0     #should be 3 at end
0x0b8: 0b00000000000000     | nums:   .quad 11
0x0c0: e9ffffffffffffff     |         .quad -23
0x0c8: 0000000000000000     |         .quad 0
0x0d0: 0f00000000000000     |         .quad 15
0x0d8: fdffffffffffffff     |         .quad -3
0x0e0: 0400000000000000     |         .quad 4
                            | 
