# This program calls a min function which takes as input the
# address of a list and the number of elements in the list
# and returns the smallest value in the list
#
        .pos 0
        irmovq stack, %rsp   #initialize stack pointer
        irmovq list, %rdi    #address of first element
        irmovq len, %rsi     #address of length of list
        mrmovq (%rsi), %rsi  #load length of list
        call min
#  When halt statement is reached, %rax should be equal to -7 (0xfffffffffffffff9)
        halt
#
# min function
# sets %rax to the value of the smallest element in a list
# %rdi contains the address of the first element
# %rsi contains the length of the list
# TODO: write the min function
min:    
		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 1(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 2(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 3(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 4(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 5(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 6(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 7(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 8(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 9(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
		mrmovq 10(%rdi), %rdi

		cmpq %rdi, %rax
		cmovl %rdi, %rax
        ret    
#
#        list data
        .pos 0x100
len:    .quad 10 
list:   .quad 14
        .quad 3
        .quad 2
        .quad 27
        .quad -2
        .quad 12
        .quad 23
        .quad 5
        .quad -7
        .quad 9

#       stack    
        .pos 0x200
stack:  .quad 0    
