# This program calls a min function which takes as input the
# address of a list and the number of elements in the list
# and returns the smallest value in the list
#
        .pos 0
        irmovq stack, %rsp   #initialize stack pointer
        irmovq list, %rdi    #address of first element
        irmovq len, %rsi     #address of length of list
        mrmovq (%rsi), %rsi  #load length of list
        call min
#  When halt statement is reached, %rax should be equal to -7 (0xfffffffffffffff9)
        halt
#
# min function
# sets %rax to the value of the smallest element in a list
# %rdi contains the address of the first element
# %rsi contains the length of the list
# TODO: write the min function

# %rax = smallest integer in list
# %rcx = temp variable for next value in list
# %rdx = temp variable for next value in list
# %rbx = increment by 8 variable
# %rsp = current item # in list
# %rbp = increment by 1 variable
# %r8  = -10 variable 

min:    
        irmovq $8, %rbx
        irmovq $2, %rsp
        irmovq $1, %rbp
        irmovq $-10, %r8
		irmovq $0, %r9

        mrmovq (%rdi), %rax
        addq %rbx, %rdi
        mrmovq (%rdi), %rcx
        mrmovq (%rdi), %rdx
        subq %rcx, %rdx
        jle nextVal
changeRax:
        rrmovq %rcx, %rax
nextVal:
        addq %rbp, %rsp
		addq %rsp, %r9
        addq %r8, %r9
        je done
		subq %r9, %r9
        addq %rbx, %rdi
        mrmovq (%rdi), %rcx
        mrmovq (%rdi), %rdx
        subq %rcx, %rdx
        jg changeRax
        jle nextVal
done:
        ret    
#
#        list data
        .pos 0x100
len:    .quad 10 
list:   .quad 14
        .quad 3
        .quad 2
        .quad 27
        .quad -2
        .quad 12
        .quad 23
        .quad 5
        .quad -7
        .quad 9

#       stack    
        .pos 0x200
stack:  .quad 0    
